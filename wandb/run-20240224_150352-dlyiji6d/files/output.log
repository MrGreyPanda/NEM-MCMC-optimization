end_nodes: [6, 6, 0, 4, 8, 7, 6, 4, 7, 5, 9, 3, 8, 2, 4, 2, 1, 9, 4, 8, 9, 2, 4, 1, 1, 10, 5, 7, 8, 1, 5, 6, 5, 9, 10, 3, 8, 7, 7, 8, 4, 0, 8, 0, 1, 6, 10, 10, 0, 9, 7, 5, 3, 5, 1, 3, 9, 3, 3, 2, 8, 7, 1, 1, 5, 8, 7, 1, 4, 8, 4, 1, 8, 5, 8, 3, 9, 8, 9, 4, 7, 1, 9, 6, 5, 9, 3, 4, 2, 3, 2, 0, 9, 10, 4, 7, 1, 1, 10, 2, 2, 0, 1, 8, 10, 6, 8, 4, 8, 3]
permutation_order: [ 1  0  3  5  4  8  9  7  2 10  6]
Best ll: -210.11711502111197
Rounded LL: -188.32831809755479
Comparison: real_ll: -134.72275896646562 - inferred_ll: -188.32831809755479
Hamming Distance: 11
weights:
[[0 0 0 1 0 1 1 0 1 1 1]
 [0 0 0 1 1 1 1 0 0 1 1]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 1 0 0 0 1 0]
 [0 0 0 0 0 0 0 0 0 0 1]
 [0 0 0 0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 1]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]]
end_nodes: [2, 9, 1, 4, 1, 7, 7, 7, 10, 6, 3, 1, 7, 0, 6, 6, 9, 0, 7, 4, 3, 9, 1, 5, 0, 0, 0, 10, 8, 0, 6, 10, 3, 6, 0, 8, 3, 7, 7, 8, 3, 5, 3, 10, 3, 7, 4, 0, 6, 8, 10, 1, 2, 10, 4, 1, 5, 8, 6, 8, 10, 3, 4, 4, 9, 7, 8, 6, 9, 0, 7, 3, 6, 6, 10, 2, 5, 8, 10, 5, 1, 7, 10, 8, 1, 2, 8, 6, 5, 7, 0, 7, 0, 4, 9, 9, 9, 6, 10, 2, 2, 8, 3, 0, 3, 8, 8, 3, 6, 8]
permutation_order: [ 1  0  3  5  4 10  6  7  8  9  2]
Best ll: -203.37895426921094
Rounded LL: -194.70589577102666
Comparison: real_ll: -138.73109694616159 - inferred_ll: -194.70589577102666
Hamming Distance: 6
weights:
[[0 0 0 1 0 1 1 0 1 1 0]
 [0 0 0 1 1 1 1 0 1 1 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 1 1 0 0 0 0]
 [0 0 0 0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]]
end_nodes: [0, 1, 1, 5, 2, 10, 4, 4, 9, 3, 9, 0, 9, 10, 2, 6, 10, 6, 8, 5, 8, 7, 8, 4, 0, 0, 5, 7, 5, 6, 6, 8, 2, 8, 2, 3, 3, 0, 2, 5, 2, 2, 8, 8, 5, 8, 10, 8, 2, 7, 6, 8, 5, 9, 5, 5, 7, 2, 6, 7, 10, 8, 3, 7, 4, 7, 8, 8, 5, 10, 7, 7, 5, 9, 8, 7, 7, 10, 3, 5, 2, 9, 4, 7, 4, 4, 8, 8, 8, 8, 10, 9, 9, 6, 4, 3, 7, 8, 5, 10, 9, 1, 5, 0, 3, 1, 0, 9, 10, 0]
permutation_order: [ 1  0  3  5  4  8 10  9  7  2  6]
Best ll: -180.29452875622576
Rounded LL: -176.51537054989305
Comparison: real_ll: -141.5980588899829 - inferred_ll: -176.51537054989305
Hamming Distance: 5
weights:
[[0 0 0 0 0 1 1 1 1 0 0]
 [0 0 0 1 1 1 1 1 1 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 1 1 1 0 0 0]
 [0 0 0 0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 0 1 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]]
end_nodes: [3, 9, 8, 2, 5, 9, 7, 10, 9, 1, 9, 0, 7, 4, 8, 3, 3, 7, 8, 8, 7, 6, 10, 2, 3, 10, 2, 8, 6, 0, 10, 1, 2, 9, 0, 4, 0, 4, 7, 9, 6, 6, 6, 9, 7, 2, 5, 1, 0, 2, 7, 3, 4, 10, 6, 10, 4, 6, 8, 6, 9, 5, 8, 9, 6, 9, 3, 5, 10, 0, 4, 9, 10, 2, 5, 8, 9, 9, 1, 10, 3, 10, 9, 4, 4, 1, 1, 7, 10, 7, 1, 5, 1, 6, 2, 0, 4, 6, 6, 1, 0, 9, 9, 0, 6, 9, 5, 8, 4, 8]
permutation_order: [ 1  0  3  5  4  6  9 10  7  8  2]
Best ll: -152.6689158350073
Rounded LL: -128.2329274021402
Comparison: real_ll: -128.2329274021402 - inferred_ll: -128.2329274021402
Hamming Distance: 0
weights:
[[0 0 0 1 0 1 1 1 1 1 0]
 [0 0 0 1 1 1 1 1 1 1 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 1 1 1 0 1 0]
 [0 0 0 0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 0 1 0 1 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]]
end_nodes: [10, 1, 0, 4, 3, 3, 2, 1, 10, 8, 1, 9, 6, 0, 0, 1, 3, 3, 8, 9, 0, 8, 3, 10, 8, 6, 3, 7, 9, 4, 0, 2, 6, 5, 4, 2, 3, 5, 1, 1, 6, 1, 5, 5, 9, 4, 0, 7, 8, 1, 6, 1, 8, 4, 10, 9, 5, 9, 3, 1, 0, 10, 3, 4, 1, 3, 1, 6, 4, 7, 10, 5, 2, 5, 5, 3, 10, 4, 10, 10, 1, 9, 10, 2, 8, 3, 2, 7, 6, 4, 10, 8, 3, 10, 5, 0, 3, 0, 5, 6, 4, 1, 3, 9, 5, 3, 10, 7, 6, 10]
permutation_order: [ 1  0  3  5  4 10  6  8  9  2  7]
Best ll: -167.15365317068014
Rounded LL: -164.38173080752267
Comparison: real_ll: -121.31616331462621 - inferred_ll: -164.38173080752267
Hamming Distance: 6
weights:
[[0 0 0 1 0 1 1 1 1 0 0]
 [0 0 0 0 1 1 1 1 1 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 1 1 1 0 0 0]
 [0 0 0 0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]]
end_nodes: [6, 6, 3, 9, 2, 3, 3, 2, 1, 4, 6, 8, 10, 8, 1, 9, 7, 3, 6, 9, 9, 3, 5, 6, 10, 3, 2, 7, 10, 2, 9, 5, 1, 8, 10, 1, 7, 5, 6, 0, 4, 8, 0, 6, 3, 5, 8, 1, 7, 8, 3, 9, 7, 0, 5, 2, 3, 2, 7, 9, 2, 8, 10, 2, 0, 1, 0, 2, 7, 10, 6, 1, 6, 10, 1, 2, 4, 9, 0, 6, 5, 2, 8, 6, 3, 0, 10, 3, 7, 4, 8, 6, 2, 5, 7, 0, 2, 9, 2, 9, 6, 1, 1, 1, 2, 4, 2, 2, 6, 2]
permutation_order: [ 1  0  3  5  2  4 10  6  9  8  7]
Best ll: -146.35957540260537
Rounded LL: -151.38184920870347
Comparison: real_ll: -123.83732650407688 - inferred_ll: -151.38184920870347
Hamming Distance: 5
weights:
[[0 0 0 1 0 0 1 1 1 1 0]
 [0 0 0 0 0 0 1 1 1 1 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 1 1 0 1 0]
 [0 0 0 0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 0 1 0 1 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0]]
end_nodes: [2, 7, 7, 2, 6, 5, 6, 8, 1, 8, 1, 1, 7, 4, 0, 10, 10, 3, 5, 3, 4, 3, 2, 2, 3, 5, 5, 10, 6, 3, 6, 7, 8, 4, 6, 2, 10, 10, 1, 2, 0, 9, 6, 2, 9, 2, 3, 2, 0, 10, 3, 7, 10, 6, 2, 9, 8, 0, 9, 3, 9, 8, 4, 9, 5, 8, 10, 5, 8, 5, 7, 6, 0, 1, 4, 10, 6, 4, 3, 6, 8, 7, 9, 4, 2, 0, 10, 9, 5, 2, 0, 4, 1, 0, 9, 3, 4, 8, 9, 3, 10, 9, 5, 5, 7, 0, 1, 7, 3, 8]
permutation_order: [ 1  0  3  5  4 10  2  8  9  6  7]
Traceback (most recent call last):
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/experiments.py", line 209, in <module>
    conduct_one_big_run([0,1,2,3,42,99,100,132,420,999], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/experiments.py", line 194, in conduct_one_big_run
    weights, ll = method.optimize()
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py", line 141, in optimize
    ll, weights = self.opt_b(weights, bounds)
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py", line 117, in opt_b
    new_parent_weights[i][k] = self.calculate_local_optimum_b_inv(i, k, order_weights, bounds, expit_weights, new_parent_weights)
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py", line 101, in calculate_local_optimum_b_inv
    res = minimize(self.local_ll_sum_b_inv, x0=weights[i][k], bounds=bounds, options={'eps': 1e-3}, args=(weights, i, k, local_vec, a_vec), method='L-BFGS-B', tol=0.1)
  File "/Users/simonmenzi/Library/Python/3.9/lib/python/site-packages/scipy/optimize/_minimize.py", line 713, in minimize
    res = _minimize_lbfgsb(fun, x0, args, jac, bounds,
  File "/Users/simonmenzi/Library/Python/3.9/lib/python/site-packages/scipy/optimize/_lbfgsb_py.py", line 406, in _minimize_lbfgsb
    return OptimizeResult(fun=f, jac=g, nfev=sf.nfev,
KeyboardInterrupt