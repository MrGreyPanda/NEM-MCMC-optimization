end_nodes: [6, 6, 0, 4, 8, 7, 6, 4, 7, 5, 3, 8, 2, 4, 2, 1, 4, 8, 2, 4, 1, 1, 5, 7, 8, 1, 5, 6, 5, 3, 8, 7, 7, 8, 4, 0, 8, 0, 1, 6, 0, 7, 5, 3, 5, 1, 3, 3, 3, 2, 8, 7, 1, 1, 5, 8, 7, 1, 4, 8, 4, 1, 8, 5, 8, 3, 8, 4, 7, 1, 6, 5, 3, 4, 2, 3, 2, 0, 4, 7, 1, 1, 2, 2, 0, 1, 8, 6, 8, 4]
permutation_order: [0 3 1 7 6 4 2 8 5]
Best ll: -267.89049120308005
Rounded LL: -329.2461059618536
Comparison: real_ll: -72.28491741266801 - inferred_ll: -329.2461059618536
Hamming Distance: 13
weights:
[[0 0 0 0 1 1 0 1 1]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0]]
end_nodes: [2, 1, 4, 1, 7, 7, 7, 6, 3, 1, 7, 0, 6, 6, 0, 7, 4, 3, 1, 5, 0, 0, 0, 8, 0, 6, 3, 6, 0, 8, 3, 7, 7, 8, 3, 5, 3, 3, 7, 4, 0, 6, 8, 1, 2, 4, 1, 5, 8, 6, 8, 3, 4, 4, 7, 8, 6, 0, 7, 3, 6, 6, 2, 5, 8, 5, 1, 7, 8, 1, 2, 8, 6, 5, 7, 0, 7, 0, 4, 6, 2, 2, 8, 3, 0, 3, 8, 8, 3, 6]
permutation_order: [0 3 6 7 1 4 8 2 5]
Best ll: -239.42487258809817
Rounded LL: -232.5556399117593
Comparison: real_ll: -71.7174344853762 - inferred_ll: -232.5556399117593
Hamming Distance: 11
weights:
[[0 1 1 0 0 1 1 0 1]
 [0 0 1 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0]
 [0 0 1 0 0 1 0 0 1]
 [0 0 0 0 0 0 0 0 0]]
end_nodes: [0, 1, 1, 5, 2, 4, 4, 3, 0, 2, 6, 6, 8, 5, 8, 7, 8, 4, 0, 0, 5, 7, 5, 6, 6, 8, 2, 8, 2, 3, 3, 0, 2, 5, 2, 2, 8, 8, 5, 8, 8, 2, 7, 6, 8, 5, 5, 5, 7, 2, 6, 7, 8, 3, 7, 4, 7, 8, 8, 5, 7, 7, 5, 8, 7, 7, 3, 5, 2, 4, 7, 4, 4, 8, 8, 8, 8, 6, 4, 3, 7, 8, 5, 1, 5, 0, 3, 1, 0, 0]
permutation_order: [0 3 7 6 1 2 4 5 8]
Best ll: -266.0391422334377
Rounded LL: -331.4915070874174
Comparison: real_ll: -71.09726187289102 - inferred_ll: -331.4915070874174
Hamming Distance: 9
weights:
[[0 0 1 0 0 1 0 0 1]
 [0 0 0 0 0 0 0 0 1]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 1]
 [0 0 0 0 0 0 0 0 1]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 1]
 [0 0 0 0 0 0 0 0 1]
 [0 0 0 0 0 0 0 0 0]]
end_nodes: [3, 8, 2, 5, 7, 1, 0, 7, 4, 8, 3, 3, 7, 8, 8, 7, 6, 2, 3, 2, 8, 6, 0, 1, 2, 0, 4, 0, 4, 7, 6, 6, 6, 7, 2, 5, 1, 0, 2, 7, 3, 4, 6, 4, 6, 8, 6, 5, 8, 6, 3, 5, 0, 4, 2, 5, 8, 1, 3, 4, 4, 1, 1, 7, 7, 1, 5, 1, 6, 2, 0, 4, 6, 6, 1, 0, 0, 6, 5, 8, 4, 8, 3, 0, 4, 0, 1, 1, 8, 0]
permutation_order: [0 3 1 6 7 4 2 8 5]
/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py:101: RuntimeWarning: overflow encountered in scalar power
  V_ik= -(D @ exp_weights @ D)[i][k] / (1 + D[i][k])**2 * exp_weights[i][k] * D[i][k]
Traceback (most recent call last):
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/experiments.py", line 212, in <module>
    conduct_one_big_run([0,1,2,3,42,99,100,132,420,999], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/experiments.py", line 196, in conduct_one_big_run
    weights, ll = method.optimize(use_wandb=True)
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py", line 151, in optimize
    ll, weights = self.opt_b(weights, bounds)
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py", line 127, in opt_b
    new_parent_weights[i][k] = self.calculate_local_optimum_b_inv(i, k, order_weights, bounds, expit_weights, new_parent_weights)
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py", line 114, in calculate_local_optimum_b_inv
    raise Exception(f"Minimization not successful, Reason: {res.message}")
Exception: Minimization not successful, Reason: ABNORMAL_TERMINATION_IN_LNSRCH