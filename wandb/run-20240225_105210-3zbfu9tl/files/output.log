
end_nodes: [24, 26, 2, 16, 32, 31, 25, 19, 30, 22, 37, 13, 32, 8, 18, 8, 6, 16, 34, 38, 9, 19, 6, 4, 21, 30, 35, 6, 22, 27, 20, 13, 35, 30, 28, 33, 16, 3, 35, 0, 5, 25, 0, 31, 21, 15, 20, 4, 12, 36, 14, 15, 9, 34, 28, 5, 5, 20, 32, 31, 6, 19, 35, 18, 7, 35, 21, 34, 13, 38, 35, 37, 18, 28, 5, 38, 24, 20, 36, 15, 18, 11, 12, 11, 2, 16, 30, 4, 5, 8, 9, 2, 5, 34, 25, 33, 17, 33, 15, 13, 37, 26, 37, 17, 28, 31, 22, 5, 20, 7, 31, 37, 21, 12, 15, 1, 17, 7, 14, 23, 10, 21, 27, 3, 6, 9, 14, 2, 36, 34, 38, 4, 1, 7, 12, 38, 36, 7, 25, 5, 23, 7, 2, 38, 1, 12, 11, 7, 30, 13, 3, 1, 34, 27, 6, 16, 4, 14, 4, 19, 22, 27, 11, 3, 32, 29, 2, 38, 6, 25, 12, 16, 22, 30, 36, 10, 13, 3, 10, 10, 21, 33, 16, 7, 38, 28, 11, 0, 30, 26, 36, 32, 19, 22, 24, 16, 9, 35, 0, 29, 5, 21, 2, 34, 17, 8, 15, 30, 22, 18, 22, 37, 8, 19, 24, 26, 5, 0, 38, 12, 21, 10, 15, 14, 28, 24, 36, 26, 2, 25, 36, 26, 2, 10, 28, 4, 16, 10, 28, 33, 31, 35, 38, 0, 2, 31, 20, 19, 29, 3, 26, 12, 35, 5, 8, 0, 25, 26, 20, 0, 13, 0, 0, 33, 6, 12, 7, 38, 12, 19, 17, 11, 6, 30, 25, 5, 1, 17, 28, 7, 16, 8, 33, 22, 7, 9, 17, 1, 2, 2, 13, 16, 35, 20, 23, 36, 2, 38, 31, 29, 27, 23, 34, 11, 13, 24, 37, 18, 0, 8, 9, 17, 21, 21, 23, 5, 21, 2, 2, 17, 10, 9, 37, 18, 23, 25, 35, 8, 18, 7, 30, 15, 3, 19, 11, 33, 4, 19, 25, 21, 19, 26, 6, 6, 35, 30, 30, 21, 21, 7, 30, 7, 31, 27, 2, 19, 21, 9, 10, 36, 24, 5, 4, 5, 12, 14, 3, 24, 0, 6, 25, 35, 33, 18, 28, 31, 37, 13, 27, 5, 23, 14, 16, 37, 10, 27, 12, 22, 7, 4]
/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py:101: RuntimeWarning: overflow encountered in scalar power
  V_ik= -(D @ exp_weights @ D)[i][k] / (1 + D[i][k])**2 * exp_weights[i][k] * D[i][k]
permutation_order: [ 3  0  2  1  4  6  7  8  9  5 14 11 12 13 10 16 17 18 15 19 20 21 27 23
 24 26 29 22 25 28 33 32 34 30 31 35 37 38 36]
Best ll: -3490.6063774571267
Rounded LL: -3797.043539629246
Comparison: real_ll: -2411.937392859826 - inferred_ll: -3797.043539629246
Hamming Distance: 155
weights:
[[0 0 0 ... 1 1 1]
 [0 0 0 ... 1 1 1]
 [0 0 0 ... 1 1 1]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
end_nodes: [8, 36, 4, 16, 7, 31, 28, 30, 24, 13, 6, 31, 1, 24, 27, 38, 0, 28, 17, 14, 37, 6, 20, 1, 1, 1, 34, 0, 24, 13, 27, 1, 33, 14, 28, 31, 35, 14, 22, 14, 14, 29, 18, 1, 26, 35, 6, 11, 18, 7, 21, 32, 27, 32, 12, 19, 18, 37, 31, 32, 25, 37, 2, 30, 15, 25, 26, 11, 23, 35, 23, 5, 28, 32, 6, 10, 33, 25, 23, 31, 1, 30, 2, 19, 37, 37, 25, 10, 10, 32, 14, 0, 12, 34, 35, 14, 25, 32, 22, 36, 22, 29, 17, 35, 38, 0, 24, 32, 8, 33, 35, 13, 27, 3, 30, 23, 36, 35, 12, 32, 26, 31, 22, 26, 22, 0, 34, 34, 21, 29, 38, 1, 14, 11, 35, 37, 11, 5, 35, 16, 2, 4, 5, 1, 28, 0, 17, 15, 17, 7, 11, 22, 18, 4, 10, 10, 16, 33, 10, 17, 18, 29, 20, 31, 30, 7, 1, 19, 24, 21, 26, 12, 16, 6, 16, 32, 13, 38, 27, 1, 14, 1, 25, 9, 2, 10, 28, 32, 27, 34, 14, 33, 28, 14, 33, 1, 25, 36, 20, 27, 3, 19, 8, 13, 3, 19, 4, 4, 19, 19, 10, 26, 36, 16, 8, 0, 35, 2, 37, 13, 36, 29, 10, 32, 2, 24, 12, 22, 6, 13, 36, 27, 37, 12, 31, 6, 24, 18, 32, 31, 1, 20, 25, 18, 1, 10, 12, 20, 36, 8, 21, 27, 13, 17, 6, 24, 35, 22, 34, 31, 34, 15, 4, 2, 5, 8, 10, 10, 34, 13, 17, 21, 38, 32, 16, 23, 21, 21, 7, 18, 15, 38, 31, 8, 37, 35, 6, 20, 2, 26, 4, 24, 9, 8, 21, 7, 37, 24, 4, 36, 35, 14, 36, 5, 17, 23, 18, 36, 34, 7, 29, 17, 6, 2, 18, 0, 0, 5, 26, 7, 2, 12, 15, 37, 26, 10, 7, 28, 10, 15, 10, 6, 27, 24, 34, 18, 35, 16, 30, 20, 6, 13, 20, 2, 1, 0, 18, 38, 20, 28, 25, 20, 25, 4, 4, 20, 38, 29, 7, 16, 13, 34, 30, 22, 16, 11, 34, 13, 19, 12, 15, 23, 5, 17, 5, 28, 5, 36, 21, 14, 24, 19, 2, 20, 11, 20, 37, 19, 15, 21]
permutation_order: [ 3  1  2  0  6  4  7 14  8  5  9 10 11 12 13 16 17 18 19 15 20 21 27 24
 23 26 29 25 22 28 32 33 34 31 35 37 36 30 38]
Best ll: -3677.085063331487
Rounded LL: -4043.110123379824
Comparison: real_ll: -2429.660595619926 - inferred_ll: -4043.110123379824
Hamming Distance: 134
weights:
[[0 0 0 ... 1 1 1]
 [1 0 0 ... 1 1 1]
 [0 0 0 ... 1 1 1]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 1]
 [0 0 0 ... 0 0 0]]
end_nodes: [3, 5, 5, 23, 10, 19, 16, 38, 13, 38, 2, 37, 10, 27, 25, 32, 23, 34, 28, 32, 17, 2, 1, 23, 29, 20, 24, 27, 33, 10, 35, 11, 15, 14, 1, 11, 20, 11, 8, 32, 32, 23, 32, 35, 11, 28, 26, 33, 23, 37, 22, 23, 28, 10, 25, 29, 33, 15, 31, 17, 31, 32, 32, 22, 29, 29, 22, 36, 35, 29, 31, 14, 20, 10, 17, 30, 19, 19, 32, 35, 33, 32, 37, 26, 19, 13, 31, 32, 23, 4, 21, 0, 12, 6, 3, 36, 3, 17, 37, 14, 6, 33, 8, 17, 15, 13, 3, 27, 2, 3, 23, 23, 11, 15, 1, 5, 7, 4, 1, 2, 1, 23, 16, 8, 10, 11, 33, 0, 24, 37, 2, 15, 9, 2, 0, 22, 7, 18, 21, 31, 1, 19, 28, 35, 38, 2, 16, 25, 9, 30, 14, 5, 20, 6, 1, 28, 8, 33, 37, 25, 31, 32, 20, 9, 21, 16, 16, 38, 26, 1, 35, 8, 3, 16, 2, 8, 10, 10, 6, 29, 14, 32, 2, 15, 14, 28, 4, 16, 5, 37, 14, 23, 16, 27, 17, 33, 0, 9, 2, 24, 26, 10, 7, 32, 5, 15, 6, 6, 1, 11, 14, 6, 13, 1, 33, 29, 29, 19, 34, 24, 13, 13, 27, 27, 32, 1, 37, 37, 3, 26, 33, 37, 11, 6, 30, 23, 1, 33, 7, 23, 18, 23, 19, 1, 26, 6, 6, 19, 12, 1, 28, 3, 26, 31, 29, 13, 37, 4, 0, 18, 1, 23, 19, 4, 14, 31, 12, 7, 36, 23, 25, 29, 8, 22, 25, 7, 16, 7, 7, 5, 21, 25, 13, 6, 1, 30, 2, 31, 18, 22, 29, 9, 23, 17, 30, 33, 30, 26, 31, 18, 25, 14, 10, 31, 38, 16, 35, 27, 5, 37, 36, 6, 4, 22, 11, 34, 9, 26, 4, 5, 2, 8, 18, 24, 14, 21, 28, 11, 33, 18, 7, 9, 34, 27, 6, 21, 33, 15, 32, 16, 10, 10, 29, 15, 25, 22, 36, 9, 29, 28, 1, 38, 24, 11, 25, 32, 3, 30, 17, 25, 16, 26, 30, 23, 35, 21, 5, 14, 34, 12, 25, 24, 0, 20, 29, 33, 29, 11, 6, 1, 25, 13, 36, 38, 24, 13, 6, 24, 35, 12]
permutation_order: [ 3  1  2  0  6  4  7 11  5  8 14  9 10 13 12 17 18 16 19 15 20 23 27 21
 24 29 25 22 26 32 28 33 34 37 31 30 35 36 38]
Best ll: -3538.3637578368866
Rounded LL: -3903.0779220881705
Comparison: real_ll: -2383.7527437978624 - inferred_ll: -3903.0779220881705
Hamming Distance: 144
weights:
[[0 0 0 ... 1 1 1]
 [1 0 0 ... 1 1 1]
 [0 0 0 ... 1 1 1]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
end_nodes: [15, 37, 34, 8, 23, 38, 30, 37, 4, 38, 0, 30, 16, 35, 14, 12, 30, 34, 35, 30, 25, 9, 14, 9, 33, 24, 0, 4, 10, 37, 2, 19, 1, 17, 30, 38, 24, 27, 25, 36, 28, 8, 23, 6, 2, 8, 31, 13, 16, 27, 19, 26, 32, 24, 36, 22, 34, 37, 26, 37, 14, 21, 1, 17, 38, 10, 20, 34, 36, 36, 6, 13, 36, 17, 18, 7, 4, 30, 30, 5, 22, 4, 26, 9, 1, 18, 27, 26, 7, 2, 38, 2, 24, 37, 21, 35, 17, 32, 15, 2, 19, 0, 4, 6, 38, 34, 2, 12, 26, 18, 16, 9, 2, 21, 20, 23, 8, 24, 24, 29, 33, 24, 38, 35, 6, 32, 17, 27, 15, 19, 27, 16, 33, 19, 35, 21, 0, 26, 37, 20, 1, 24, 37, 8, 3, 21, 29, 22, 22, 38, 17, 31, 1, 37, 3, 1, 23, 16, 29, 19, 37, 38, 20, 11, 23, 11, 20, 23, 38, 16, 19, 24, 6, 1, 36, 8, 19, 32, 14, 17, 15, 20, 11, 27, 6, 6, 38, 20, 21, 14, 28, 10, 5, 21, 13, 36, 28, 17, 14, 7, 2, 33, 12, 20, 36, 11, 17, 21, 5, 22, 37, 8, 26, 18, 33, 17, 29, 22, 26, 18, 26, 36, 26, 2, 26, 9, 12, 0, 30, 32, 27, 35, 14, 2, 29, 33, 18, 34, 21, 14, 4, 37, 18, 7, 15, 2, 2, 32, 12, 27, 36, 3, 0, 30, 7, 10, 32, 19, 15, 1, 33, 34, 26, 3, 7, 21, 8, 16, 34, 30, 3, 22, 14, 12, 7, 34, 7, 10, 15, 17, 8, 0, 31, 36, 25, 3, 17, 15, 17, 33, 33, 27, 3, 30, 20, 0, 3, 8, 2, 7, 3, 4, 30, 2, 5, 32, 32, 31, 20, 10, 20, 4, 22, 24, 24, 37, 19, 23, 16, 12, 21, 27, 7, 8, 35, 0, 24, 5, 36, 11, 2, 23, 29, 38, 34, 24, 2, 27, 3, 23, 31, 20, 26, 26, 29, 1, 15, 13, 34, 17, 37, 4, 27, 14, 27, 8, 1, 20, 23, 35, 16, 7, 29, 7, 33, 24, 6, 20, 36, 34, 6, 37, 0, 30, 9, 15, 24, 2, 33, 5, 36, 6, 24, 11, 1, 21, 7, 1, 7, 30]
permutation_order: [ 3  2  1  0  4  6 14  7  5  8 11 10  9 13 12 16 17 18 15 19 20 21 24 27
 26 23 29 22 25 33 28 34 32 37 30 31 35 38 36]
Best ll: -3630.661320430473
Rounded LL: -4004.680391427013
Comparison: real_ll: -2379.711518734413 - inferred_ll: -4004.680391427013
Hamming Distance: 144
weights:
[[0 0 0 ... 1 1 1]
 [0 0 0 ... 1 1 1]
 [1 0 0 ... 1 1 1]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
end_nodes: [7, 1, 17, 15, 14, 8, 6, 34, 5, 37, 27, 2, 1, 5, 13, 14, 32, 38, 1, 35, 12, 34, 26, 14, 28, 37, 17, 0, 10, 27, 21, 17, 9, 13, 21, 6, 5, 24, 6, 22, 22, 38, 16, 2, 29, 34, 7, 24, 5, 35, 18, 23, 36, 12, 4, 2, 14, 18, 5, 14, 6, 24, 17, 29, 23, 10, 23, 22, 13, 17, 4, 38, 10, 34, 15, 10, 29, 24, 17, 35, 14, 20, 3, 14, 2, 20, 25, 17, 4, 13, 36, 20, 13, 31, 25, 29, 9, 16, 8, 15, 35, 34, 16, 37, 27, 37, 25, 23, 14, 8, 32, 31, 5, 3, 7, 9, 10, 27, 38, 4, 24, 24, 38, 29, 33, 16, 35, 0, 7, 34, 17, 21, 7, 18, 27, 10, 29, 0, 16, 32, 11, 32, 6, 19, 32, 38, 12, 9, 23, 10, 34, 33, 0, 38, 20, 31, 1, 7, 23, 19, 15, 3, 15, 36, 5, 5, 31, 4, 34, 8, 8, 30, 35, 10, 16, 33, 38, 27, 13, 34, 12, 19, 25, 23, 28, 33, 28, 7, 15, 14, 4, 21, 1, 37, 35, 14, 37, 14, 0, 4, 3, 14, 4, 2, 21, 4, 32, 15, 17, 31, 13, 34, 8, 36, 36, 30, 15, 30, 26, 12, 6, 6, 27, 22, 27, 26, 29, 3, 6, 3, 25, 21, 6, 15, 12, 12, 34, 28, 8, 27, 11, 17, 29, 15, 4, 28, 35, 6, 3, 34, 0, 5, 15, 10, 26, 31, 30, 13, 25, 3, 10, 24, 0, 24, 16, 29, 18, 27, 35, 31, 9, 12, 18, 13, 3, 37, 34, 3, 20, 3, 3, 37, 30, 32, 33, 10, 3, 32, 5, 11, 4, 38, 4, 15, 25, 7, 36, 15, 37, 38, 2, 5, 26, 37, 36, 33, 20, 16, 13, 20, 15, 16, 25, 8, 19, 29, 20, 4, 0, 29, 36, 6, 4, 34, 13, 32, 16, 8, 22, 4, 15, 23, 18, 10, 28, 34, 19, 33, 0, 35, 19, 6, 8, 16, 7, 6, 35, 9, 17, 18, 38, 13, 21, 13, 16, 32, 31, 16, 3, 5, 27, 17, 2, 0, 21, 8, 16, 10, 28, 35, 27, 35, 0, 7, 4, 9, 34, 2, 23, 37, 35, 9, 27, 8, 2, 19, 23, 2, 22, 13]
permutation_order: [ 3  1  0  2  4  6  7 14  5  9  8 11 10 12 13 19 16 17 18 15 20 21 23 27
 24 29 26 25 22 28 32 33 34 35 37 30 31 38 36]
Traceback (most recent call last):
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/experiments.py", line 212, in <module>
    conduct_one_big_run([0,1,2,3,42,99,100,132,420,999], [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/experiments.py", line 196, in conduct_one_big_run
    weights, ll = method.optimize(use_wandb=True)
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py", line 151, in optimize
    ll, weights = self.opt_b(weights, bounds)
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py", line 127, in opt_b
    new_parent_weights[i][k] = self.calculate_local_optimum_b_inv(i, k, order_weights, bounds, expit_weights, new_parent_weights)
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py", line 112, in calculate_local_optimum_b_inv
    res = minimize(self.local_ll_sum_b_inv_with_grad, x0=weights[i][k], bounds=bounds, jac=True, options={'eps': 1e-3}, args=(weights, i, k, local_vec, a_vec), method='L-BFGS-B', tol=0.1)
  File "/Users/simonmenzi/Library/Python/3.9/lib/python/site-packages/scipy/optimize/_minimize.py", line 713, in minimize
    res = _minimize_lbfgsb(fun, x0, args, jac, bounds,
  File "/Users/simonmenzi/Library/Python/3.9/lib/python/site-packages/scipy/optimize/_lbfgsb_py.py", line 309, in _minimize_lbfgsb
    sf = _prepare_scalar_function(fun, x0, jac=jac, args=args, epsilon=eps,
  File "/Users/simonmenzi/Library/Python/3.9/lib/python/site-packages/scipy/optimize/_optimize.py", line 402, in _prepare_scalar_function
    sf = ScalarFunction(fun, x0, args, grad, hess,
  File "/Users/simonmenzi/Library/Python/3.9/lib/python/site-packages/scipy/optimize/_differentiable_functions.py", line 166, in __init__
    self._update_fun()
  File "/Users/simonmenzi/Library/Python/3.9/lib/python/site-packages/scipy/optimize/_differentiable_functions.py", line 262, in _update_fun
    self._update_fun_impl()
  File "/Users/simonmenzi/Library/Python/3.9/lib/python/site-packages/scipy/optimize/_differentiable_functions.py", line 163, in update_fun
    self.f = fun_wrapped(self.x)
  File "/Users/simonmenzi/Library/Python/3.9/lib/python/site-packages/scipy/optimize/_differentiable_functions.py", line 145, in fun_wrapped
    fx = fun(np.copy(x), *args)
  File "/Users/simonmenzi/Library/Python/3.9/lib/python/site-packages/scipy/optimize/_optimize.py", line 78, in __call__
    self._compute_if_needed(x, *args)
  File "/Users/simonmenzi/Library/Python/3.9/lib/python/site-packages/scipy/optimize/_optimize.py", line 72, in _compute_if_needed
    fg = self.fun(x, *args)
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py", line 92, in local_ll_sum_b_inv_with_grad
    cell_ratios = self.compute_cell_ratios(B, self.score_tables)
  File "/Users/simonmenzi/Developer/Private/NEM-MCMC-optimization/methods.py", line 53, in compute_cell_ratios
    cell_ratios[i, :] += np.log(1.0 -
KeyboardInterrupt